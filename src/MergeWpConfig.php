<?php

namespace SolidWP\WP_CLI\Backups;

use WP_CLI;
use WP_CLI_Command;
use WP_CLI\Utils;

class MergeWpConfig extends WP_CLI_Command {

	/**
	 * Merges a list of wp-config values into the destination wp-config.php file.
	 *
	 * It only accepts JSON via STDIN following the same format generated by the
	 * "wp config list --format=json" command.
	 *
	 * The command exits with the following codes
	 *  - "0" indicates all provided values were saved.
	 *  - "1" indicates invalid input was provided.
	 *  - "2" indicates no values were saved.
	 *  - "3" indicates some values were saved, and some failed.
	 *
	 * ## OPTIONS
	 *
	 * [--config-file=<path>]
	 * : Specify the file path to the config file to be read. Defaults to the root of the
	 * WordPress installation and the filename "wp-config.php".
	 *
	 * [--porcelain]
	 * : Only output keys that failed to save.
	 *
	 * ## EXAMPLES
	 *
	 *     # Contents of to-import.json
	 *     [
	 *      {
	 *        "name": "table_prefix",
	 *        "value": "wp_",
	 *        "type": "variable"
	 *      },
	 *      {
	 *        "name": "DB_NAME",
	 *        "value": "solid-backups",
	 *        "type": "constant"
	 *      }
	 *     ]
	 *     $ cat to-import.json | wp solid backups merge-wp-config
	 *
	 * @when before_wp_load
	 */
	public function __invoke( array $args, array $assoc_args ) {
		$config_file = $this->get_config_path( $assoc_args );
		$transformer = new \WPConfigTransformer( $config_file );
		$stdin       = file_get_contents( 'php://stdin' );

		/**
		 * @var list<array{name: string, value: string, type: 'constant'|'variable'}> $entries
		 */
		if ( ! $stdin || ! $entries = json_decode( $stdin, true ) ) {
			WP_CLI::error( 'Invalid input. You must pass a JSON array to stdin.' );
		}

		foreach ( $entries as $i => $entry ) {
			if ( ! isset( $entry['name'], $entry['value'], $entry['type'] ) ) {
				WP_CLI::error( sprintf( 'Invalid entry #%d. The following keys are required: name, value, type.', $i ) );
			}

			if ( $entry['type'] !== 'constant' && $entry['type'] !== 'variable' ) {
				WP_CLI::error( sprintf( 'Invalid entry #%d. The type must be either "constant" or "variable".', $i ) );
			}
		}

		$failed = [];
		$saved  = [];

		foreach ( $entries as $entry ) {
			$options = [
				'raw' => true,
				'add' => true,
			];

			$value = var_export( $entry['value'], true );

			try {
				if ( ! $transformer->update( $entry['type'], $entry['name'], $value, $options ) ) {
					throw new \Exception( 'Failed to save config value.' );
				}

				$saved[] = $entry['name'];
			} catch ( \Exception $e ) {
				WP_CLI::warning( sprintf( 'Failed to save config value "%s (%s)": %s.', $entry['name'], $entry['type'], $e->getMessage() ) );
				$failed[] = $entry['name'];
			}
		}

		if ( $saved && $failed ) {
			$exit = 3;
		} elseif ( $failed ) {
			$exit = 2;
		} else {
			$exit = 0;
		}

		if ( Utils\get_flag_value( $assoc_args, 'porcelain' ) ) {
			if ( $failed ) {
				WP_CLI::line( implode( ', ', $failed ) );
			}
			WP_CLI::halt( $exit );
		} else {
			if ( $saved ) {
				WP_CLI::success( sprintf( 'Successfully saved config values: %s.', implode( ', ', $saved ) ) );
			}

			if ( $failed ) {
				WP_CLI::error( sprintf( 'Failed to save config values: %s.', implode( ', ', $failed ) ), $exit );
			}
		}
	}

	/**
	 * Gets the path to the wp-config.php file or gives a helpful error if none found.
	 *
	 * @param array $assoc_args associative arguments given while calling wp config subcommand
	 *
	 * @return string Path to wp-config.php file.
	 */
	private function get_config_path( $assoc_args ) {
		if ( isset( $assoc_args['config-file'] ) ) {
			$path = $assoc_args['config-file'];
			if ( ! file_exists( $path ) ) {
				$this->config_file_not_found_error( basename( $assoc_args['config-file'] ) );
			}
		} else {
			$path = Utils\locate_wp_config();
			if ( ! $path ) {
				$this->config_file_not_found_error( 'wp-config.php' );
			}
		}

		return $path;
	}

	/**
	 * Gives error the wp-config file not found
	 *
	 * @param string $wp_config_file_name Config file name.
	 *
	 * @return void
	 */
	private function config_file_not_found_error( $wp_config_file_name ) {
		WP_CLI::error( "'{$wp_config_file_name}' not found.\nEither create one manually or use `wp config create`." );
	}
}
